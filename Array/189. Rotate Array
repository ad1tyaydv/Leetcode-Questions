// Time Complexity = O(N.K)

class Solution {
public:

    void check(vector<int>& nums) {

        int n = nums.size();
        
        int first = nums[n - 1];
        for(int i=n-1;i>0;i--) {
            nums[i] = nums[i - 1];
        }

        nums[0] = first;
    }

    void rotate(vector<int>& nums, int k) {

        int n = nums.size();

        if(n == 0)  return;
        k = k % n;
        if(k == 0)  return;

        for(int i=0;i<k;i++) {
            check(nums);
        }
    }
};

------------------------------------------------------------------------------------------------------------------------------

// Time Complexity = O(N)

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        
        int n = nums.size();
        k = k % n;
         reverse(nums.begin(), nums.end());
         reverse(nums.begin(), nums.begin() + k);
         reverse(nums.begin() + k, nums.end());
    }
};
